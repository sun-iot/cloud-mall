// Code generated by goctl. DO NOT EDIT!

package customer

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	customerLevelFieldNames          = builder.RawFieldNames(&CustomerLevel{})
	customerLevelRows                = strings.Join(customerLevelFieldNames, ",")
	customerLevelRowsExpectAutoSet   = strings.Join(stringx.Remove(customerLevelFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	customerLevelRowsWithPlaceHolder = strings.Join(stringx.Remove(customerLevelFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	customerLevelModel interface {
		Insert(ctx context.Context, data *CustomerLevel) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CustomerLevel, error)
		Update(ctx context.Context, data *CustomerLevel) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCustomerLevelModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CustomerLevel struct {
		Id                int64          `db:"id"`                  // 自增ID
		CustomerLevel     int64          `db:"customer_level"`      // 会员级别
		CustomerLevelName sql.NullString `db:"customer_level_name"` // 会员级别名
		MinPoint          sql.NullInt64  `db:"min_point"`           // 该级别最低分
		MaxPoint          sql.NullInt64  `db:"max_point"`           // 该级别最高分
		CreatedTime       sql.NullTime   `db:"created_time"`
		UpdatedTime       sql.NullTime   `db:"updated_time"`
		DeletedTime       sql.NullTime   `db:"deleted_time"`
	}
)

func newCustomerLevelModel(conn sqlx.SqlConn) *defaultCustomerLevelModel {
	return &defaultCustomerLevelModel{
		conn:  conn,
		table: "`customer_level`",
	}
}

func (m *defaultCustomerLevelModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCustomerLevelModel) FindOne(ctx context.Context, id int64) (*CustomerLevel, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", customerLevelRows, m.table)
	var resp CustomerLevel
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCustomerLevelModel) Insert(ctx context.Context, data *CustomerLevel) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, customerLevelRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CustomerLevel, data.CustomerLevelName, data.MinPoint, data.MaxPoint, data.CreatedTime, data.UpdatedTime, data.DeletedTime)
	return ret, err
}

func (m *defaultCustomerLevelModel) Update(ctx context.Context, data *CustomerLevel) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, customerLevelRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CustomerLevel, data.CustomerLevelName, data.MinPoint, data.MaxPoint, data.CreatedTime, data.UpdatedTime, data.DeletedTime, data.Id)
	return err
}

func (m *defaultCustomerLevelModel) tableName() string {
	return m.table
}
