// Code generated by goctl. DO NOT EDIT!

package customer

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	customerLoginLogFieldNames          = builder.RawFieldNames(&CustomerLoginLog{})
	customerLoginLogRows                = strings.Join(customerLoginLogFieldNames, ",")
	customerLoginLogRowsExpectAutoSet   = strings.Join(stringx.Remove(customerLoginLogFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	customerLoginLogRowsWithPlaceHolder = strings.Join(stringx.Remove(customerLoginLogFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	customerLoginLogModel interface {
		Insert(ctx context.Context, data *CustomerLoginLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CustomerLoginLog, error)
		Update(ctx context.Context, data *CustomerLoginLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCustomerLoginLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CustomerLoginLog struct {
		Id          int64          `db:"id"`          // 登陆日志ID
		CustomerId  int64          `db:"customer_id"` // 用户ID
		LoginTime   sql.NullTime   `db:"login_time"`  // 登录时间
		LoginIp     sql.NullString `db:"login_ip"`    // 登录IP
		LoginType   sql.NullInt64  `db:"login_type"`  // 登陆类型：0未成功，1成功
		CreatedTime sql.NullTime   `db:"created_time"`
		UpdatedTime sql.NullTime   `db:"updated_time"`
		DeletedTime sql.NullTime   `db:"deleted_time"`
	}
)

func newCustomerLoginLogModel(conn sqlx.SqlConn) *defaultCustomerLoginLogModel {
	return &defaultCustomerLoginLogModel{
		conn:  conn,
		table: "`customer_login_log`",
	}
}

func (m *defaultCustomerLoginLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCustomerLoginLogModel) FindOne(ctx context.Context, id int64) (*CustomerLoginLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", customerLoginLogRows, m.table)
	var resp CustomerLoginLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCustomerLoginLogModel) Insert(ctx context.Context, data *CustomerLoginLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, customerLoginLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CustomerId, data.LoginTime, data.LoginIp, data.LoginType, data.CreatedTime, data.UpdatedTime, data.DeletedTime)
	return ret, err
}

func (m *defaultCustomerLoginLogModel) Update(ctx context.Context, data *CustomerLoginLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, customerLoginLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CustomerId, data.LoginTime, data.LoginIp, data.LoginType, data.CreatedTime, data.UpdatedTime, data.DeletedTime, data.Id)
	return err
}

func (m *defaultCustomerLoginLogModel) tableName() string {
	return m.table
}
