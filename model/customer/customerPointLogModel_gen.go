// Code generated by goctl. DO NOT EDIT!

package customer

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	customerPointLogFieldNames          = builder.RawFieldNames(&CustomerPointLog{})
	customerPointLogRows                = strings.Join(customerPointLogFieldNames, ",")
	customerPointLogRowsExpectAutoSet   = strings.Join(stringx.Remove(customerPointLogFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	customerPointLogRowsWithPlaceHolder = strings.Join(stringx.Remove(customerPointLogFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	customerPointLogModel interface {
		Insert(ctx context.Context, data *CustomerPointLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CustomerPointLog, error)
		Update(ctx context.Context, data *CustomerPointLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCustomerPointLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CustomerPointLog struct {
		Id          int64          `db:"id"`           // 积分日志ID
		CustomerId  int64          `db:"customer_id"`  // 用户ID
		PointSource sql.NullString `db:"point_source"` // 积分来源：0订单，1登陆，2活动
		ReferNumber sql.NullInt64  `db:"refer_number"` // 积分来源相关编号
		ChangePoint sql.NullInt64  `db:"change_point"` // 变更积分数
		CreatedTime sql.NullTime   `db:"created_time"`
		UpdatedTime sql.NullTime   `db:"updated_time"`
		DeletedTime sql.NullTime   `db:"deleted_time"`
	}
)

func newCustomerPointLogModel(conn sqlx.SqlConn) *defaultCustomerPointLogModel {
	return &defaultCustomerPointLogModel{
		conn:  conn,
		table: "`customer_point_log`",
	}
}

func (m *defaultCustomerPointLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCustomerPointLogModel) FindOne(ctx context.Context, id int64) (*CustomerPointLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", customerPointLogRows, m.table)
	var resp CustomerPointLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCustomerPointLogModel) Insert(ctx context.Context, data *CustomerPointLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, customerPointLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CustomerId, data.PointSource, data.ReferNumber, data.ChangePoint, data.CreatedTime, data.UpdatedTime, data.DeletedTime)
	return ret, err
}

func (m *defaultCustomerPointLogModel) Update(ctx context.Context, data *CustomerPointLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, customerPointLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CustomerId, data.PointSource, data.ReferNumber, data.ChangePoint, data.CreatedTime, data.UpdatedTime, data.DeletedTime, data.Id)
	return err
}

func (m *defaultCustomerPointLogModel) tableName() string {
	return m.table
}
