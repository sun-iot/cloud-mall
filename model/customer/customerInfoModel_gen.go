// Code generated by goctl. DO NOT EDIT!

package customer

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	customerInfoFieldNames          = builder.RawFieldNames(&CustomerInfo{})
	customerInfoRows                = strings.Join(customerInfoFieldNames, ",")
	customerInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(customerInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	customerInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(customerInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	customerInfoModel interface {
		Insert(ctx context.Context, data *CustomerInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CustomerInfo, error)
		Update(ctx context.Context, data *CustomerInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCustomerInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CustomerInfo struct {
		Id               int64           `db:"id"`                 // 自增ID
		CustomerId       int64           `db:"customer_id"`        // 用户ID
		CustomerName     sql.NullString  `db:"customer_name"`      // 用户真实姓名
		IdentityCardType sql.NullInt64   `db:"identity_card_type"` // 证件类型：1 身份证，2 军官证，3 护照
		IdentityCardNo   sql.NullString  `db:"identity_card_no"`   // 证件号码
		MobilePhone      sql.NullInt64   `db:"mobile_phone"`       // 手机号码
		Email            sql.NullString  `db:"email"`              // 电子邮件
		Gender           sql.NullInt64   `db:"gender"`             // 性别：1 男生 2 女生 3 其他
		UserPoint        sql.NullInt64   `db:"user_point"`         // 用户积分
		RegisterTime     sql.NullTime    `db:"register_time"`      // 用户注册时间
		Birthday         sql.NullTime    `db:"birthday"`           // 用户生日
		CustomerLevel    sql.NullInt64   `db:"customer_level"`     // 会员级别
		UserMoney        sql.NullFloat64 `db:"user_money"`         // 会员余额
		CreatedTime      sql.NullTime    `db:"created_time"`
		UpdatedTime      sql.NullTime    `db:"updated_time"`
		DeletedTime      sql.NullTime    `db:"deleted_time"`
	}
)

func newCustomerInfoModel(conn sqlx.SqlConn) *defaultCustomerInfoModel {
	return &defaultCustomerInfoModel{
		conn:  conn,
		table: "`customer_info`",
	}
}

func (m *defaultCustomerInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCustomerInfoModel) FindOne(ctx context.Context, id int64) (*CustomerInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", customerInfoRows, m.table)
	var resp CustomerInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCustomerInfoModel) Insert(ctx context.Context, data *CustomerInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, customerInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CustomerId, data.CustomerName, data.IdentityCardType, data.IdentityCardNo, data.MobilePhone, data.Email, data.Gender, data.UserPoint, data.RegisterTime, data.Birthday, data.CustomerLevel, data.UserMoney, data.CreatedTime, data.UpdatedTime, data.DeletedTime)
	return ret, err
}

func (m *defaultCustomerInfoModel) Update(ctx context.Context, data *CustomerInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, customerInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CustomerId, data.CustomerName, data.IdentityCardType, data.IdentityCardNo, data.MobilePhone, data.Email, data.Gender, data.UserPoint, data.RegisterTime, data.Birthday, data.CustomerLevel, data.UserMoney, data.CreatedTime, data.UpdatedTime, data.DeletedTime, data.Id)
	return err
}

func (m *defaultCustomerInfoModel) tableName() string {
	return m.table
}
