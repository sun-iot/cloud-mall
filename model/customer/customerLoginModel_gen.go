// Code generated by goctl. DO NOT EDIT!

package customer

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	customerLoginFieldNames          = builder.RawFieldNames(&CustomerLogin{})
	customerLoginRows                = strings.Join(customerLoginFieldNames, ",")
	customerLoginRowsExpectAutoSet   = strings.Join(stringx.Remove(customerLoginFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	customerLoginRowsWithPlaceHolder = strings.Join(stringx.Remove(customerLoginFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	customerLoginModel interface {
		Insert(ctx context.Context, data *CustomerLogin) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CustomerLogin, error)
		Update(ctx context.Context, data *CustomerLogin) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCustomerLoginModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CustomerLogin struct {
		Id          int64          `db:"id"`          // 自增ID
		CustomerId  int64          `db:"customer_id"` // 用户ID
		Username    sql.NullString `db:"username"`    // 用户名
		Password    sql.NullString `db:"password"`    // 加密后的密码
		State       sql.NullInt64  `db:"state"`       // 用户状态
		CreatedTime sql.NullTime   `db:"created_time"`
		UpdatedTime sql.NullTime   `db:"updated_time"`
		DeletedTime sql.NullTime   `db:"deleted_time"`
	}
)

func newCustomerLoginModel(conn sqlx.SqlConn) *defaultCustomerLoginModel {
	return &defaultCustomerLoginModel{
		conn:  conn,
		table: "`customer_login`",
	}
}

func (m *defaultCustomerLoginModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCustomerLoginModel) FindOne(ctx context.Context, id int64) (*CustomerLogin, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", customerLoginRows, m.table)
	var resp CustomerLogin
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCustomerLoginModel) Insert(ctx context.Context, data *CustomerLogin) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, customerLoginRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CustomerId, data.Username, data.Password, data.State, data.CreatedTime, data.UpdatedTime, data.DeletedTime)
	return ret, err
}

func (m *defaultCustomerLoginModel) Update(ctx context.Context, data *CustomerLogin) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, customerLoginRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CustomerId, data.Username, data.Password, data.State, data.CreatedTime, data.UpdatedTime, data.DeletedTime, data.Id)
	return err
}

func (m *defaultCustomerLoginModel) tableName() string {
	return m.table
}
