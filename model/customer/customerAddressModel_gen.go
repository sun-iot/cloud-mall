// Code generated by goctl. DO NOT EDIT!

package customer

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	customerAddressFieldNames          = builder.RawFieldNames(&CustomerAddress{})
	customerAddressRows                = strings.Join(customerAddressFieldNames, ",")
	customerAddressRowsExpectAutoSet   = strings.Join(stringx.Remove(customerAddressFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	customerAddressRowsWithPlaceHolder = strings.Join(stringx.Remove(customerAddressFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	customerAddressModel interface {
		Insert(ctx context.Context, data *CustomerAddress) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CustomerAddress, error)
		Update(ctx context.Context, data *CustomerAddress) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCustomerAddressModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CustomerAddress struct {
		Id          int64          `db:"id"`          // 自增ID
		CustomerId  int64          `db:"customer_id"` // 用户ID
		Zip         sql.NullInt64  `db:"zip"`         // 邮编
		ProviceId   sql.NullInt64  `db:"provice_id"`  // 省/自治市 ID
		CityId      sql.NullInt64  `db:"city_id"`     // 地区表中城市的ID
		DistrictId  sql.NullInt64  `db:"district_id"` // 区ID
		Address     sql.NullString `db:"address"`     // 具体门牌号地址
		IdDefault   sql.NullInt64  `db:"id_default"`  // 是否是默认地址
		CreatedTime sql.NullTime   `db:"created_time"`
		UpdatedTime sql.NullTime   `db:"updated_time"`
		DeletedTime sql.NullTime   `db:"deleted_time"`
	}
)

func newCustomerAddressModel(conn sqlx.SqlConn) *defaultCustomerAddressModel {
	return &defaultCustomerAddressModel{
		conn:  conn,
		table: "`customer_address`",
	}
}

func (m *defaultCustomerAddressModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCustomerAddressModel) FindOne(ctx context.Context, id int64) (*CustomerAddress, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", customerAddressRows, m.table)
	var resp CustomerAddress
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCustomerAddressModel) Insert(ctx context.Context, data *CustomerAddress) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, customerAddressRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CustomerId, data.Zip, data.ProviceId, data.CityId, data.DistrictId, data.Address, data.IdDefault, data.CreatedTime, data.UpdatedTime, data.DeletedTime)
	return ret, err
}

func (m *defaultCustomerAddressModel) Update(ctx context.Context, data *CustomerAddress) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, customerAddressRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CustomerId, data.Zip, data.ProviceId, data.CityId, data.DistrictId, data.Address, data.IdDefault, data.CreatedTime, data.UpdatedTime, data.DeletedTime, data.Id)
	return err
}

func (m *defaultCustomerAddressModel) tableName() string {
	return m.table
}
